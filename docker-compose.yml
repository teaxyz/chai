services:
  db:
    image: postgres
    shm_size: 256m
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=s3cr3t
    ports:
      - "5435:5432"
    volumes:
      - ./data/db/data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  alembic:
    build:
      context: .
      dockerfile: ./alembic/Dockerfile
    environment:
      - CHAI_DATABASE_URL=${CHAI_DATABASE_URL:-postgresql://postgres:s3cr3t@db:5432/chai}
      - PGPASSWORD=${CHAI_DB_PASSWORD:-s3cr3t}
    depends_on:
      db:
        condition: service_healthy
    working_dir: /alembic
    entrypoint: [ "./run_migrations.sh" ]

  crates:
    build:
      context: .
      dockerfile: ./package_managers/crates/Dockerfile
    environment:
      - CHAI_DATABASE_URL=${CHAI_DATABASE_URL:-postgresql://postgres:s3cr3t@db:5432/chai}
      - NO_CACHE=${NO_CACHE:-false}
      - PYTHONPATH=/
      - DEBUG=${DEBUG:-false}
      - TEST=${TEST:-false}
      - FETCH=${FETCH:-true}
      - FREQUENCY=${FREQUENCY:-24}
      - ENABLE_SCHEDULER=${ENABLE_SCHEDULER:-true}
    volumes:
      - ./data/crates:/data/crates
    depends_on:
      db:
        condition: service_healthy
      alembic:
        condition: service_completed_successfully

  homebrew:
    build:
      context: .
      dockerfile: ./package_managers/homebrew/Dockerfile
    environment:
      - CHAI_DATABASE_URL=${CHAI_DATABASE_URL:-postgresql://postgres:s3cr3t@db:5432/chai}
      - NO_CACHE=${NO_CACHE:-false}
      - DEBUG=${DEBUG:-false}
      - TEST=${TEST:-false}
      - FETCH=${FETCH:-true}
      - FREQUENCY=${FREQUENCY:-1}
      - ENABLE_SCHEDULER=${ENABLE_SCHEDULER:-true}
      - PYTHONPATH=/
    volumes:
      - ./data/homebrew:/data/homebrew
    depends_on:
      db:
        condition: service_healthy
      alembic:
        condition: service_completed_successfully

  # api:
  #   build:
  #     context: ./api
  #     dockerfile: Dockerfile
  #   environment:
  #     - DATABASE_URL=postgresql://postgres:s3cr3t@db:5432/chai
  #     - HOST=0.0.0.0
  #     - PORT=8080
  #   ports:
  #     - "8080:8080"
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     alembic:
  #       condition: service_completed_successfully
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:8080/heartbeat"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 5s

  debian:
    build:
      context: .
      dockerfile: ./package_managers/debian/Dockerfile
    environment:
      - CHAI_DATABASE_URL=${CHAI_DATABASE_URL:-postgresql://postgres:s3cr3t@db:5432/chai}
      - NO_CACHE=${NO_CACHE:-false}
      - PYTHONPATH=/
      - DEBUG=${DEBUG:-false}
      - TEST=${TEST:-false}
      - FETCH=${FETCH:-true}
      - FREQUENCY=${FREQUENCY:-24}
      - ENABLE_SCHEDULER=${ENABLE_SCHEDULER:-true}
    volumes:
      - ./data/debian:/data/debian
    depends_on:
      db:
        condition: service_healthy
      alembic:
        condition: service_completed_successfully

  pkgx:
    build:
      context: .
      dockerfile: ./package_managers/pkgx/Dockerfile
    environment:
      - CHAI_DATABASE_URL=${CHAI_DATABASE_URL:-postgresql://postgres:s3cr3t@db:5432/chai}
      - NO_CACHE=${NO_CACHE:-false}
      - PYTHONPATH=/
      - DEBUG=${DEBUG:-false}
      - TEST=${TEST:-false}
      - FETCH=${FETCH:-true}
      - FREQUENCY=${FREQUENCY:-24}
      - ENABLE_SCHEDULER=${ENABLE_SCHEDULER:-true}
    volumes:
      - ./data/pkgx:/data/pkgx
    depends_on:
      db:
        condition: service_healthy
      alembic:
        condition: service_completed_successfully

  ranker:
    build:
      context: .
      dockerfile: ./ranker/Dockerfile
    environment:
      - CHAI_DATABASE_URL=${CHAI_DATABASE_URL:-postgresql://postgres:s3cr3t@db:5432/chai}
      - PYTHONPATH=/
      - LOAD=${LOAD:-false}
      - DEBUG=${DEBUG:-false}
    depends_on:
      db:
        condition: service_healthy
      alembic:
        condition: service_completed_successfully
