"""base migration

Revision ID: 238d591d5310
Revises:
Create Date: 2024-10-28 12:17:43.762965

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "238d591d5310"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "depends_on_types",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_depends_on_types")),
    )
    op.create_index(
        op.f("ix_depends_on_types_name"), "depends_on_types", ["name"], unique=True
    )
    op.create_table(
        "licenses",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_licenses")),
    )
    op.create_index(op.f("ix_licenses_name"), "licenses", ["name"], unique=True)
    op.create_table(
        "sources",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_sources")),
        sa.UniqueConstraint("type", name=op.f("uq_sources_type")),
    )
    op.create_table(
        "url_types",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_url_types")),
        sa.UniqueConstraint("name", name=op.f("uq_url_types_name")),
    )
    op.create_table(
        "package_managers",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("source_id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["source_id"],
            ["sources.id"],
            name=op.f("fk_package_managers_source_id_sources"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_package_managers")),
        sa.UniqueConstraint("source_id", name=op.f("uq_package_managers_source_id")),
    )
    op.create_table(
        "urls",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("url", sa.String(), nullable=False),
        sa.Column("url_type_id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["url_type_id"],
            ["url_types.id"],
            name=op.f("fk_urls_url_type_id_url_types"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_urls")),
        sa.UniqueConstraint("url_type_id", "url", name="uq_url_type_url"),
    )
    op.create_index(op.f("ix_urls_url"), "urls", ["url"], unique=False)
    op.create_index(op.f("ix_urls_url_type_id"), "urls", ["url_type_id"], unique=False)
    op.create_table(
        "users",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("username", sa.String(), nullable=False),
        sa.Column("source_id", sa.UUID(), nullable=False),
        sa.Column("import_id", sa.String(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["source_id"], ["sources.id"], name=op.f("fk_users_source_id_sources")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_users")),
        sa.UniqueConstraint("source_id", "username", name="uq_source_username"),
    )
    op.create_index(op.f("ix_users_import_id"), "users", ["import_id"], unique=False)
    op.create_index(op.f("ix_users_source_id"), "users", ["source_id"], unique=False)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=False)
    op.create_table(
        "load_history",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("package_manager_id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["package_manager_id"],
            ["package_managers.id"],
            name=op.f("fk_load_history_package_manager_id_package_managers"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_load_history")),
    )
    op.create_table(
        "packages",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("derived_id", sa.String(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("package_manager_id", sa.UUID(), nullable=False),
        sa.Column("import_id", sa.String(), nullable=False),
        sa.Column("readme", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["package_manager_id"],
            ["package_managers.id"],
            name=op.f("fk_packages_package_manager_id_package_managers"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_packages")),
        sa.UniqueConstraint("derived_id", name=op.f("uq_packages_derived_id")),
        sa.UniqueConstraint(
            "package_manager_id", "import_id", name="uq_package_manager_import_id"
        ),
    )
    op.create_index(
        op.f("ix_packages_import_id"), "packages", ["import_id"], unique=False
    )
    op.create_index(op.f("ix_packages_name"), "packages", ["name"], unique=False)
    op.create_index(
        op.f("ix_packages_package_manager_id"),
        "packages",
        ["package_manager_id"],
        unique=False,
    )
    op.create_table(
        "package_urls",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("package_id", sa.UUID(), nullable=False),
        sa.Column("url_id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["package_id"],
            ["packages.id"],
            name=op.f("fk_package_urls_package_id_packages"),
        ),
        sa.ForeignKeyConstraint(
            ["url_id"], ["urls.id"], name=op.f("fk_package_urls_url_id_urls")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_package_urls")),
        sa.UniqueConstraint("package_id", "url_id", name="uq_package_url"),
    )
    op.create_index(
        op.f("ix_package_urls_package_id"), "package_urls", ["package_id"], unique=False
    )
    op.create_index(
        op.f("ix_package_urls_url_id"), "package_urls", ["url_id"], unique=False
    )
    op.create_table(
        "user_packages",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("package_id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["package_id"],
            ["packages.id"],
            name=op.f("fk_user_packages_package_id_packages"),
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_user_packages_user_id_users")
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_packages")),
        sa.UniqueConstraint("user_id", "package_id", name="uq_user_package"),
    )
    op.create_index(
        op.f("ix_user_packages_package_id"),
        "user_packages",
        ["package_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_user_packages_user_id"), "user_packages", ["user_id"], unique=False
    )
    op.create_table(
        "versions",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("package_id", sa.UUID(), nullable=False),
        sa.Column("version", sa.String(), nullable=False),
        sa.Column("import_id", sa.String(), nullable=False),
        sa.Column("size", sa.Integer(), nullable=True),
        sa.Column("published_at", sa.DateTime(), nullable=True),
        sa.Column("license_id", sa.UUID(), nullable=True),
        sa.Column("downloads", sa.Integer(), nullable=True),
        sa.Column("checksum", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["license_id"],
            ["licenses.id"],
            name=op.f("fk_versions_license_id_licenses"),
        ),
        sa.ForeignKeyConstraint(
            ["package_id"],
            ["packages.id"],
            name=op.f("fk_versions_package_id_packages"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_versions")),
        sa.UniqueConstraint("package_id", "version", name="uq_package_version"),
    )
    op.create_index(
        op.f("ix_versions_downloads"), "versions", ["downloads"], unique=False
    )
    op.create_index(
        op.f("ix_versions_import_id"), "versions", ["import_id"], unique=False
    )
    op.create_index(
        op.f("ix_versions_license_id"), "versions", ["license_id"], unique=False
    )
    op.create_index(
        op.f("ix_versions_package_id"), "versions", ["package_id"], unique=False
    )
    op.create_index(
        op.f("ix_versions_published_at"), "versions", ["published_at"], unique=False
    )
    op.create_index(op.f("ix_versions_size"), "versions", ["size"], unique=False)
    op.create_index(op.f("ix_versions_version"), "versions", ["version"], unique=False)
    op.create_table(
        "dependencies",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("version_id", sa.UUID(), nullable=False),
        sa.Column("dependency_id", sa.UUID(), nullable=False),
        sa.Column("dependency_type_id", sa.UUID(), nullable=True),
        sa.Column("semver_range", sa.String(), nullable=True),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["dependency_id"],
            ["packages.id"],
            name=op.f("fk_dependencies_dependency_id_packages"),
        ),
        sa.ForeignKeyConstraint(
            ["dependency_type_id"],
            ["depends_on_types.id"],
            name=op.f("fk_dependencies_dependency_type_id_depends_on_types"),
        ),
        sa.ForeignKeyConstraint(
            ["version_id"],
            ["versions.id"],
            name=op.f("fk_dependencies_version_id_versions"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_dependencies")),
        sa.UniqueConstraint(
            "version_id",
            "dependency_id",
            "dependency_type_id",
            name="uq_version_dependency_type",
        ),
    )
    op.create_index(
        op.f("ix_dependencies_dependency_id"),
        "dependencies",
        ["dependency_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_dependencies_dependency_type_id"),
        "dependencies",
        ["dependency_type_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_dependencies_version_id"), "dependencies", ["version_id"], unique=False
    )
    op.create_table(
        "user_versions",
        sa.Column(
            "id",
            sa.UUID(),
            server_default=sa.text("uuid_generate_v4()"),
            nullable=False,
        ),
        sa.Column("user_id", sa.UUID(), nullable=False),
        sa.Column("version_id", sa.UUID(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.Column(
            "updated_at", sa.DateTime(), server_default=sa.text("now()"), nullable=False
        ),
        sa.ForeignKeyConstraint(
            ["user_id"], ["users.id"], name=op.f("fk_user_versions_user_id_users")
        ),
        sa.ForeignKeyConstraint(
            ["version_id"],
            ["versions.id"],
            name=op.f("fk_user_versions_version_id_versions"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk_user_versions")),
        sa.UniqueConstraint("user_id", "version_id", name="uq_user_version"),
    )
    op.create_index(
        op.f("ix_user_versions_user_id"), "user_versions", ["user_id"], unique=False
    )
    op.create_index(
        op.f("ix_user_versions_version_id"),
        "user_versions",
        ["version_id"],
        unique=False,
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_versions_version_id"), table_name="user_versions")
    op.drop_index(op.f("ix_user_versions_user_id"), table_name="user_versions")
    op.drop_table("user_versions")
    op.drop_index(op.f("ix_dependencies_version_id"), table_name="dependencies")
    op.drop_index(op.f("ix_dependencies_dependency_type_id"), table_name="dependencies")
    op.drop_index(op.f("ix_dependencies_dependency_id"), table_name="dependencies")
    op.drop_table("dependencies")
    op.drop_index(op.f("ix_versions_version"), table_name="versions")
    op.drop_index(op.f("ix_versions_size"), table_name="versions")
    op.drop_index(op.f("ix_versions_published_at"), table_name="versions")
    op.drop_index(op.f("ix_versions_package_id"), table_name="versions")
    op.drop_index(op.f("ix_versions_license_id"), table_name="versions")
    op.drop_index(op.f("ix_versions_import_id"), table_name="versions")
    op.drop_index(op.f("ix_versions_downloads"), table_name="versions")
    op.drop_table("versions")
    op.drop_index(op.f("ix_user_packages_user_id"), table_name="user_packages")
    op.drop_index(op.f("ix_user_packages_package_id"), table_name="user_packages")
    op.drop_table("user_packages")
    op.drop_index(op.f("ix_package_urls_url_id"), table_name="package_urls")
    op.drop_index(op.f("ix_package_urls_package_id"), table_name="package_urls")
    op.drop_table("package_urls")
    op.drop_index(op.f("ix_packages_package_manager_id"), table_name="packages")
    op.drop_index(op.f("ix_packages_name"), table_name="packages")
    op.drop_index(op.f("ix_packages_import_id"), table_name="packages")
    op.drop_table("packages")
    op.drop_table("load_history")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_source_id"), table_name="users")
    op.drop_index(op.f("ix_users_import_id"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_urls_url_type_id"), table_name="urls")
    op.drop_index(op.f("ix_urls_url"), table_name="urls")
    op.drop_table("urls")
    op.drop_table("package_managers")
    op.drop_table("url_types")
    op.drop_table("sources")
    op.drop_index(op.f("ix_licenses_name"), table_name="licenses")
    op.drop_table("licenses")
    op.drop_index(op.f("ix_depends_on_types_name"), table_name="depends_on_types")
    op.drop_table("depends_on_types")
    # ### end Alembic commands ###
